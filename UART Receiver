`timescale 1ns / 1ps 
// Number of data bits received per UART packet.   
parameter   PAYLOAD_BITS    = 8;  
module UART_Rx( 
input  clk, // Top level system clock input. 
input  resetn, // Asynchronous active low reset. 
input  uart_rxd, // UART Receive pin. 
input  uart_rx_en   , // Receive enable 

 
output uart_rx_break, // Did we get a BREAK message? 
output uart_rx_valid, // Valid data received and available. 
output reg  [PAYLOAD_BITS-1:0] uart_rx_data   // The received data. 
);     
parameter Clk_Hz=100000000;  // Clock frequency in hertz. 
parameter Baud_Rate=9600;  // Number of stop bits indicating the end of a packet. 
parameter CYCLES_PER_BIT = Clk_Hz/Baud_Rate;  // Number of clock cycles per uart bit. 
parameter STOP_BITS = 1;  // Number of stop bits indicating the end of a packet. 
// Size of the registers which store sample counts and bit durations. 
parameter COUNT_REG_LEN = 1+$clog2(CYCLES_PER_BIT);  
// Internally latched value of the uart_rxd line. Helps break long timing 
// paths from input pins into the logic. 
reg rxd_reg;  
// Storage for the recieved serial data. 
reg [PAYLOAD_BITS-1:0] received_data; 
// Counter for the number of cycles over a packet bit. 
reg [COUNT_REG_LEN-1:0] cycle_counter; 
// Counter for the number of received bits of the packet. 
reg [3:0] bit_counter; 
// Sample of the UART input line whenever we are in the middle of a bit frame. 
reg bit_sample; 
// Current and next states of the internal FSM. 
reg [1:0] p_state,n_state; 
//states 
parameter IDLE=0,START=1,RECV=2,STOP=3; 
assign uart_rx_break = uart_rx_valid && ~|received_data; 
assign uart_rx_valid = p_state == STOP && n_state == IDLE; 
always @(posedge clk) begin 
    if(!resetn)  
        uart_rx_data  <= {PAYLOAD_BITS{1'b0}}; 

 
    else if (p_state == STOP)  
        uart_rx_data  <= received_data; 
end 
// FSM next state selection. 
wire next_bit = cycle_counter == CYCLES_PER_BIT ; 
wire payload_done = bit_counter == PAYLOAD_BITS  ; 
// Handle picking the next state. 
always @(*) begin      
case(p_state) 
        IDLE : n_state = rxd_reg      ? IDLE : START; 
        START: n_state = next_bit     ? RECV : START; 
        RECV : n_state = payload_done ? STOP : RECV ; 
        STOP : n_state = next_bit     ? IDLE : STOP ; 
        default  : n_state = IDLE; 
endcase 
end 
// Handle updates to the recieved data register. 
integer i = 0; 
always @(posedge clk) begin 
    if(!resetn)  
        received_data <= {PAYLOAD_BITS{1'b0}}; 
    else if(p_state == IDLE)  
        received_data <= {PAYLOAD_BITS{1'b0}}; 
   else if(p_state == RECV && next_bit ) begin 
        received_data[PAYLOAD_BITS-1] <= bit_sample; 
        for ( i = PAYLOAD_BITS-2; i >= 0; i = i - 1) 
            received_data[i] <= received_data[i+1]; 
    end 
end 
// Increments the bit counter when recieving. 

 
always @(posedge clk) begin  
    if(!resetn)  
        bit_counter <= 4'b0; 
    else if(p_state != RECV)  
        bit_counter <= {COUNT_REG_LEN{1'b0}}; 
    else if(p_state == RECV && next_bit)  
        bit_counter <= bit_counter + 1'b1; 
end 
// Sample the recieved bit when in the middle of a bit frame. 
always @(posedge clk) begin 
    if(!resetn)  
        bit_sample <= 1'b0; 
    else if (cycle_counter == CYCLES_PER_BIT/2)  
        bit_sample <= rxd_reg; 
end 
// Progresses the next FSM state. 
always @(posedge clk)  
begin  
    if(!resetn)  
        p_state <= IDLE; 
    else  
        p_state <= n_state; 
end 
// Responsible for updating the internal value of the rxd_reg. 
always @(posedge clk)  
begin  
    if(!resetn) 
        rxd_reg     <= 1'b1; 
    else if(uart_rx_en)  
        rxd_reg     <= uart_rxd; 

 
end 
endmodule 
