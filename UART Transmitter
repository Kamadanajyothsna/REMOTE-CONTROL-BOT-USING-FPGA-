`timescale 1ns / 1ps 
// Number of data bits recieved per UART packet.     
parameter   PAYLOAD_BITS    = 8; 
module UART_Tx ( 
input  clk , // Top level system clock input. 
input  resetn , // Asynchronous active low reset. 
input  uart_tx_en  , // Send the data on uart_tx_data 
input  [PAYLOAD_BITS-1:0]   uart_tx_data,  // The data to be sent 
output uart_txd    , // UART transmit pin. 
output uart_tx_busy // Module busy sending previous item. 
    ); 
parameter Clk_Hz=100000000;  // Clock frequency in hertz. 
parameter Baud_Rate=9600;  // Number of stop bits indicating the end of a packet. 
parameter CYCLES_PER_BIT = Clk_Hz/Baud_Rate;  // Number of clock cycles per uart bit. 
parameter STOP_BITS = 1;  // Number of stop bits indicating the end of a packet. 
// Size of the registers which store sample counts and bit durations. 
parameter COUNT_REG_LEN = 1+$clog2(CYCLES_PER_BIT); 
// Internally latched value of the uart_txd line. Helps break long timing 

 
// paths from the logic to the output pins. 
reg txd_reg; 
// Storage for the serial data to be sent. 
reg [PAYLOAD_BITS-1:0] data_to_send; 
// Counter for the number of cycles over a packet bit. 
reg [COUNT_REG_LEN-1:0] cycle_counter; 
// Counter for the number of sent bits of the packet. 
reg [3:0] bit_counter; 
// Current and next states of the internal FSM. 
reg [1:0]p_state,n_state; 
//states 
parameter IDLE=0,START=1,SEND=2,STOP=3; 
wire next_bit     = cycle_counter == CYCLES_PER_BIT; 
wire payload_done = bit_counter   == PAYLOAD_BITS  ; 
wire stop_done = bit_counter   == p_state == STOP; 
assign uart_tx_busy=p_state!=IDLE; 
assign uart_txd = txd_reg; 
// Progresses the next FSM state. 
always @(posedge clk)  
begin  
    if(!resetn) 
        p_state <= IDLE; 
    else 
        p_state <= n_state; 
end 
//Next state logic 
always @(*) begin   
    case(p_state) 
        IDLE : n_state = uart_tx_en   ? START: IDLE ; 
        START: n_state = next_bit  ? SEND : START; 

 
        SEND : n_state = payload_done ? STOP : SEND ; 
        STOP : n_state = stop_done    ? IDLE : STOP ; 
        default  : n_state = IDLE; 
    endcase 
end 
// Handle updates to the sent data register. 
integer i = 0; 
always @(posedge clk) begin  
    if(!resetn)  
        data_to_send <= {PAYLOAD_BITS{1'b0}}; 
    else if(p_state == IDLE && uart_tx_en)  
        data_to_send <= uart_tx_data; 
    else if(p_state       == SEND       && next_bit )  
    begin 
        for (i = PAYLOAD_BITS-2; i >= 0; i = i - 1) 
            data_to_send[i] <= data_to_send[i+1]; 
    end 
end  
// Increments the bit counter each time a new bit frame is sent. 
always @(posedge clk) begin 
    if(!resetn) 
        bit_counter <= 4'b0; 
    else if(p_state != SEND && p_state != STOP)  
        bit_counter <= {COUNT_REG_LEN{1'b0}}; 
    else if(p_state == SEND && n_state == STOP)  
        bit_counter <= {COUNT_REG_LEN{1'b0}}; 
    else if(p_state == STOP&& next_bit) 
        bit_counter <= bit_counter + 1'b1; 
    else if(p_state == SEND && next_bit) 
        bit_counter <= bit_counter + 1'b1; 

 
end 
// Increments the cycle counter when sending. 
always @(posedge clk) begin  
    if(!resetn) 
        cycle_counter <= {COUNT_REG_LEN{1'b0}}; 
    else if(next_bit)  
        cycle_counter <= {COUNT_REG_LEN{1'b0}}; 
    else if(p_state == START || p_state == SEND  || p_state == STOP) 
        cycle_counter <= cycle_counter + 1'b1; 
end 
// Responsible for updating the internal value of the txd_reg. 
always @(posedge clk) begin 
    if(!resetn) 
        txd_reg <= 1'b1; 
    else if(p_state == IDLE) 
        txd_reg <= 1'b1; 
    else if(p_state == START)  
        txd_reg <= 1'b0; 
    else if(p_state == SEND)  
        txd_reg <= data_to_send[0]; 
    else if(p_state == STOP)  
        txd_reg <= 1'b1; 
end 
endmodule 
